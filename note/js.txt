1, 爆栈   内存 / （变量 * number）

2，函数在压入栈内的时候 会产生作用域链， 会将不同的变量存到不同的内存中

3，js执行代码的时候 首先会创建几个变量

  GC golbalContext: 全局上下文，包含了全局对象  在栈底 是不会弹出去的，window的全局变量

4， js执行函数的时候 会创建一个执行上下文

  EC  execution context ： 执行上下文（函数）

  Callee Stack： 函数执行栈 里面装载了无数的执行上下文，很多的 EC ==== 简称 ECS 复数 

5，AO：activation object 活动对象  函数执行的时候 会激活AO，相当于函数的内部
  ES5之前：
  EC: {
    scopeChain: {
      scope
    },
    AO: { 内部变量 },
    VO: { 外部变量 },
    scope: [AO, golbalContext.VO]    // scope = AO + scopeChain
  }

6，VO：variable object  变量对象 可以分析函数的作用域链 函数执行动态创建出来的 处理的是 函数外部的变量

7， GC

  新版：

  EC: {
    thisBinding: <this, value>,
    LexicalEnvirament: { 词法环境
      EnviramentRecord: {
        type: 'declar',
      }，
      b: uninitalized
    }，
    outer: {外部的变量}
    VariableEnvironment：{ 变量环境
      存储var 的变量
      a:underfine
    }
  }


8, 递归
  0, 爆栈: 函数 caller 运行时，调用其他函数 called ,
          js引起会在调用栈中新开一个调用帧存储作用域和上下文信息，
          而caller的调用帧信息仍需要保存,
          而内存中调用栈存储信息有限，递归情况下,
          如果递归层次过深会导致调用栈耗光而引起stack overflow —— 爆栈

  1, 蹦床函数: 返回另一个函数执行
  2, 尾调用: 一个函数最后一步调用了另一个函数
  3, 尾调用优化: 







node: 

  timers: 看看当前定时器有没有过期  到时间就执行 每个阶段切换到下一个阶段 都会执行 nextTick

  pending callback:

  idle, prepare: node 内部

  poll: 循环这个机制,  所有 i/o 都在poll阶段执行, 有timer执行timer,没有的话执行check, 
        每个阶段切换到下一个阶段都会执行一个 nextTick 

  check: 





