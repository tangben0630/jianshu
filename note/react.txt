生命周期

一，旧版本：
  
  创建时：
    getInitialState
    componentWillMount
    render
    componentDidMount

  更新时：
    componentWillReceiveProps    (props属性改变)
    shouldComponentUpdate        (state属性改变)
    componentWillUpdate
    render
    componentDidUpdate

  销毁：
    componentWillUnmout


二，新版本：

  创建时：
    1，constructor:

      在react组件挂载之前，会调用他的构造函数，
      在为 React.Component 子类实现构造函数时，应在其他语句之前前调用 super(props)

    2，getDerivedStateFromProps

      会在render之前调用，并且在初始挂载及后续更新时都会调用，它应该返回一个对象来更新state，
      如果返回null，则不更新任何内容

    3，render

      render被调用时，他会检查this.props和this.state的变化返回类型：
        react元素，
      如果 shouldComponentUpdate() 返回 false，则不会调用 render()

    4，componentDidMount

      组件挂载后（插入 DOM 树中）立即调用
      如果添加了订阅，请不要忘记在 componentWillUnmount() 里取消订阅

  更新时：
    1，getDerivedStateFromProps
    2，shouldComponentUpdate

      根据 shouldComponentUpdate() 的返回值，判断 React 组件的输出是否受当前 
      state 或 props 更改的影响

    3，render
    4，getSnapshotBeforeUpdate
      在最近一次渲染输出（提交到 DOM 节点）之前调用
      它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。
      此生命周期的任何返回值将作为参数传递给 componentDidUpdate()。

    5，componentDidUpdate
      会在更新后会被立即调用。首次渲染不会执行此方法。

  销毁：
    componentWillUnmout



状态提升：通过最近的父级组件，调用起props里面的函数，实现对下面传递的数据发生变化，达到共享
Context: 通过组件树提供了一个传递数据的方法，从而避免了在每一个层级手动的传递 props 属性。
          父级


高阶组件HOC：
  return 一个react组件，抽取公用代码
  增强组件复用性，灵活性

自定义hooks
  1，hook是函数
  2，命名use开头
  3，内部可以调用其他hook函数
  4，并非react的特性


2021-6-21

  Fiber架构:

      纤程: 协程的一种实现, 更新可以中断, 更新, 可以有优先级的体现

      FiberRootNode --> RootFiber --> App --> p --> ka --> num

      Fiber: {

        静态数据结构的属性:

          tag: 节点类型,
          key: key,
          stateNode: 静态节点, 真实的dom节点

        链接:

          return: 指向父节点
          child: 子节点
          sibling: 兄弟节点

        动态工作单元:

          pengdingProps: 
          memoizedProps:
          updateQueue:
          memoizedState:
          dependencies: 依赖
          mode:

          effectTag:
          nextEffect:

          firstEffect:
          lastEffect:

        调度优先级:
          lines:  expirationTime 被 lane 取代
          childLanes:
        
        alternate: 该fiber在另一次更新时对应的 Fiber

      }

      工作原理: 
          1, 每个节点都是一个fiber
          2, 页面只有一个根fiber节点, 来管理fiber -----> FiberRootNode
          3, 每个节点都会有自己的根节点 RootFiber, 一个页面可以有很多 RootFiber
          4,  FiberRootNode: {
                current: RootFiber
              }
          5,  RootFiber: {
                stateNode: FiberRootNode
              }

          6,  alternate: 

              1, 首次调用 reactDom.render() --> 会创建整个应用的根节点 FiberRootNode ,
              2, 每次调用 reactDom.render() 都会创建当前应用的根节点 RootFiber, 
              3, 每次更新, 都会创建 RootFiber 的alternate属性
                  RootFiber {
                    alternate: RootFiber
                  }
              4, 用 alternate 属性, 利用深度优先遍历, 创建整棵fiber树, 
              5, 目前有两颗 fiber 树, 页面本身的 fiber树, 和 workingProgress fiber树 内存中构建
              6, 当 workingProgress fiber 树完成了渲染, 此时, FiberRootNode 的指针就指向了
                  workingProgress fiber 树的根节点, 于是 workingProgress fiber 树就变成了
                  current fiber树, 变成了页面上的fiber树
              7, 每次创建更新都会重新创建一次 workingProgress fiber 树, current fiber的节点称为
                  current 节点, 此时, current.alternate 已经指向了一个 RootFiber, 
                  所以再创建 workingProgress fiber时, 会基于这个 RootFiber
              8,  这种将 current fiber 与 本次更新返回的jsx进行比较生成 workingProgress fiber
                  diff算法

          7, 首屏渲染跟更新的区别就是 是否有 diff 算法







